class Add2LinkList{
	public static class ListNode{
		int val;
		ListNode next;
		public ListNode(int data){
			this.val=data;
			this.next=null;
		}
	}
	public static ListNode head;
	public static ListNode tail;
	public static int size;
	//public  int sum=0;
	void addAtFirst(int data){
		ListNode newNode=new ListNode(data);
		size++;
		if(head==null){
			head=newNode;
			return;
		}
		//Node temp=head;
		newNode.next=head;
		head=newNode;
	}
	void printLinkedList(ListNode head){
		System.out.print("\nRequired LL----->:  ");
		/*if(size==0){
			System.out.println("  length of LL  Zero");
			return;
		}*/
		ListNode temp=head;
		if(head==null){
			System.out.print("\n Empty LinkList.....");
			return;
		}
		while(temp!=null){
			System.out.print(temp.val+"-> ");
			temp=temp.next;
		}
		System.out.println("\n");	
	}
	ListNode reverseLL(ListNode head){
		if(head==null||head.next==null){
			return head;
		}
		ListNode prev=null;
		ListNode curr=head;
		ListNode nxt;
		while(curr!=null){
			nxt=curr.next;
			curr.next=prev;
			prev=curr;
			curr=nxt;
		}
		return prev;
	}
	ListNode doubleLL_M2(ListNode head1,ListNode head2 ){
		if(head1==null&&head2==null){
			return null;
		}
	            	ListNode curr1=reverseLL(head1);
	            	ListNode curr2=reverseLL(head2);

		printLinkedList(curr1);
		printLinkedList(curr2);
		int sum=0;
		int carry=0;
		ListNode newNode=new ListNode(111);
		ListNode temp=newNode;
		while(curr1!=null&&curr2!=null){
			sum=(carry+curr1.val+curr2.val);
			int data=sum%10;

			ListNode newN=new ListNode(data);
			temp.next=	newN;
			temp=newN;
			carry=sum/10;
			curr1=curr1.next;
			curr2=curr2.next;
		}

		while(curr1!=null){
			sum=(carry+curr1.val);
			int data=sum%10;
			carry=sum/10;
			ListNode newN=new ListNode(data);
			temp.next=	newN;
			temp=newN;
			curr1=curr1.next;
		}
		while(curr2!=null){
			sum=(carry+curr2.val);
			int data=sum%10;
			carry=sum/10;
			ListNode newN=new ListNode(data);
			temp.next=	newN;
			temp=newN;
			curr2=curr2.next;
		}
		//System.out.println("\n temp data-->"+temp.val);
		//printLinkedList(newNode);
		while(carry!=0){
			int data=carry%10;
			ListNode newN=new ListNode(data);
			temp.next=	newN;
			temp=newN;
			carry=carry/10;
		}
		ListNode reso=reverseLL(newNode.next);
		return reso;
	}
	public static void main(String args[]){
		Add2LinkList obj1=new Add2LinkList();
		//obj1.addAtFirst(5);
		obj1.addAtFirst(9);
		obj1.addAtFirst(8);
		ListNode head1=head;
		obj1.addAtFirst(7);
		obj1.addAtFirst(9);
		ListNode head2=head;
		//obj1.printLinkedList(head);
	//System.out.println("\nhead1&& head2->"+head1.val+"-->  "+head2.val);	
		ListNode res2=obj1.doubleLL_M2(head1,head2);
		//obj1.printLinkedList(res2);
	}
}
