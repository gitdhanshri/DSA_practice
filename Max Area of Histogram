import java.util.Stack;
class maxAreaOfHistogram{
	void printArray(int arr[]){
		for(int i=0;i<arr.length;i++){
			System.out.print(arr[i]+"  ");
		}
		System.out.println("");
	}
	int findMaxArea(int[] heights){
	   	Stack<Integer> s=new Stack<Integer>();
		int[] left=new int[heights.length];
		int[] right=new int[heights.length];
		for(int i=0;i<heights.length;i++){
			
		}
		//next smaller right
		for(int i=heights.length-1;i>=0;i--){
			while(!s.empty()&&heights[s.peek()]>=heights[i]){
				s.pop();
			}
			if(s.isEmpty()){
				right[i]=heights.length;	
			}
			else{
				right[i]=s.peek();	
			}
			s.push(i);
		}
		while(!s.empty()){
			s.pop();
		}
		// next smaller left
		for(int i=0;i<heights.length;i++){
			while(!s.empty()&&heights[s.peek()]>=heights[i]){
				s.pop();
			}
			if(s.isEmpty()){
				left[i]=-1;	
			}
			else{
				left[i]=s.peek();	
			}
			s.push(i);
		}

		while(!s.empty()){
			s.pop();
		}
		//3rd Step:
		for(int i=0;i<heights.length;i++){
			int res=(right[i]-left[i]-1)*heights[i];
			s.push(res);
		}
		System.out.println(s);
		int maxArea=Integer.MIN_VALUE;
		while(!s.empty()){
			maxArea=Integer.max(maxArea,s.peek());
			s.pop();
		}
		return maxArea;
	}
	public static void main(String args[]){
		maxAreaOfHistogram obj1=new maxAreaOfHistogram();
		int arr[]={2,2};
		//int arr[]={2,1,5,6,2,3};
		int res=obj1.findMaxArea(arr);
		System.out.println("Result-->"+res);
	}
}
