class IsPalindromeLL{
	public static class ListNode{
		int val;
		ListNode next;
		public ListNode(int data){
			this.val=data;
			this.next=null;
		}
	}
	public static ListNode head;
	public static ListNode tail;
	public static int size;
	
	void addAtFirst(int data){
		ListNode newNode=new ListNode(data);
		size++;
		if(head==null){
			head=newNode;
			return;
		}
		newNode.next=head;
		head=newNode;
	}
	void addAtLast(int data){
		ListNode newNode=new ListNode(data);
		size++;
		if(head==null){
			head=tail=newNode;
			return;
		}
		ListNode temp=head;
		while(temp.next!=null){
			temp=temp.next;
		}
		temp.next=newNode;
		newNode.next=null;
	}
	void addInBetween2Nodes(int index,int data){
		if(index==0){
			addAtFirst(12);
			return;
		}
		ListNode newNode=new ListNode(data);
		size++;
		if(head==null){
			head=tail=newNode;
			return;
		}
		ListNode temp=head;
		int i=0;
		while(i<(index-1)){
			temp=temp.next;
			i++;
		}
		newNode.next=temp.next;
		temp.next=newNode;
	}
	void printLinkedList(ListNode head){
		System.out.print("\nRequired LL----->:  ");
		if(size==0){
			System.out.println("  length of LL  Zero");
			return;
		}
		ListNode temp=head;
		if(head==null){
			System.out.print("\n Empty LinkList.....");
			return;
		}
		while(temp!=null){
			System.out.print(temp.val+"  ");
			temp=temp.next;
		}
		System.out.print("\n");	
	}
	ListNode reverse(ListNode head,int k ){
		int i=0;
		//ListNode prev=null;
		ListNode first=head;
		ListNode second=head.next;
		ListNode prev=first;
		ListNode curr=second;
		ListNode nxt;
		while(i<k){
			nxt=curr.next;
			curr.next=prev;
			prev=curr;
			curr=nxt;
			i++;

		}
		ListNode third=prev;
		ListNode fourth=curr;
		first.next=third;
		second.next=fourth;
		
		return head;
	}
	
	public static void main(String args[]){
		IsPalindromeLL obj1=new IsPalindromeLL();
			obj1.addAtFirst(13);
			obj1.addAtFirst(12);
			obj1.addAtFirst(11);
			obj1.addAtFirst(10);
			obj1.addAtFirst(9);
			obj1.addAtFirst(8);
			obj1.addAtFirst(7);
			obj1.addAtFirst(6);
			obj1.addAtFirst(5);
			obj1.addAtFirst(4);
			obj1.addAtFirst(3);
			obj1.addAtFirst(2);
			obj1.addAtFirst(1);
			obj1.printLinkedList(head);	
			obj1.reverse(head,4);
			obj1.printLinkedList(head);	
	}
}
