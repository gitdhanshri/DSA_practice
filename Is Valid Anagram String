class Solution {
    int countOfRepaetation(char c, String s) {
        int start = 0;
        int end = s.length() - 1;
        int count = 0;
        while (start <= end) {
            if (s.charAt(start) == c && s.charAt(end) == c) {
                if (start == end) {
                    count++;
                } else {
                    count += 2;
                }
            } else if (s.charAt(start) == c) {
                count++;
            } else if (s.charAt(end) == c) {
                count++;
            }
            start++;
            end--;
        }
        return count;
    }
    String miniizeTheString(String s){
		String res="";
		char[] ch_arr=s.toCharArray();
		Arrays.sort(ch_arr);
		String ans=String.valueOf(ch_arr);
        if(ans.length()==1){
			return ans;
		}
		int i=1;
		char ch=ans.charAt(0);
		while(i<ans.length()){
				if(ch==ans.charAt(i)){
					while( i<ans.length()  && ch==ans.charAt(i)){
						i++;
					}
					res=res+ch;
					if(i<ans.length()){
						ch=ans.charAt(i);
					}
				}
				else{
					res=res+ans.charAt(i);
					i++;
				}
		}
		return res;
	}
    public boolean isAnagram(String s1, String s2) {
        String s=miniizeTheString(s1);
        if (s1.length() != s2.length()) {
            return false;
        } else {
            int len1 = s.length();
            int i = 0;
            while (i < len1) {
                if (countOfRepaetation(s.charAt(i), s1) == countOfRepaetation(s.charAt(i), s2)) {
                    i++;
                } else {
                    return false;
                }
            }
        }
        return true;
    }
}
