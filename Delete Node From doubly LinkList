class SortLinkList{
	public static class Node{
		int data;
		Node next;
		Node prev;
		public Node(int data){
			this.data=data;
			this.next=null;
			this.prev=null;
		}
	}
	public static Node head;
	public static Node tail;
	public static int size=0;	
	Node addNewElementInLL(int data){
		Node newNode=new Node(data);
		size++;
		if(head==null){
			head=tail=newNode;
			head.next=null;
			head.prev=null;
			return head;
		}
		newNode.next=head;
		head.prev=newNode;
		newNode.prev=null;
		head=newNode;
		return head;
	}
	void printLinkedList(){
		System.out.print("\nRequired LL----->:  ");
		if(size==0){
			System.out.println("  length of LL  Zero");
			return;
		}
		Node temp=head;
		if(head==null){
			System.out.print("\n Empty LinkList.....");
			return;
		}
		temp=head;
		while(temp!=null){
			System.out.print(temp.data+"  ");
			temp=temp.next;
		}	
		System.out.println("\n");
	}
	Node insertInBetween(int data,int index){
		Node newNode=new Node(data);
		size++;
		//insert at index From Start
		if(size<1&&index>size){
			return head;
		}
		Node front=head;
		Node back=null;
		int i=1;
		while(i<index){
			back=front;
			front=front.next;
			i++;
		}
		back.next=newNode;
		newNode.next=front;
		newNode.prev=back;
		front.prev=newNode;
		return head;
	
	}
	Node deleteLastNode(Node head){
		if(head==null){
			return null;
		}
		else if(head.next==null){
		System.out.println("Only Single Head");
			head=head.next;
			System.out.println("head data-->"+head);
			return head;
		}
		else {
		Node temp=tail.prev;
		tail=temp;
		temp.next=null;
		return head;
}
	}
	public static void main(String args[]){
		SortLinkList obj1=new SortLinkList();
		/*obj1.addNewElementInLL(6);
		obj1.addNewElementInLL(5);
		obj1.addNewElementInLL(4);
		obj1.addNewElementInLL(3);*/
		//obj1.addNewElementInLL(2);
		//obj1.addNewElementInLL(1);
		obj1.printLinkedList();
		//obj1.insertInBetween(99,3);
		obj1.deleteLastNode(head);
		System.out.println("head in Main"+head.data);
		obj1.printLinkedList();
	}
}
