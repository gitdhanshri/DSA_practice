class reverseLinkL{
	public static class Node{
		int data;
		Node next;
		public Node(int data){
			this.data=data;
			this.next=null;
		}
	}
	public static Node head;
	public static Node tail;
	public static int size;
	
	void addAtFirst(int data){
		Node newNode=new Node(data);
		size++;
		if(head==null){
			head=newNode;
			return;
		}
		//Node temp=head;
		newNode.next=head;
		head=newNode;
	}
	void printLinkedList(){
		System.out.print("\nRequired LL-->");
		if(size==0){
			System.out.println("  length of LL  Zero");
			return;
		}
		Node temp=head;
		if(head==null){
			System.out.print("\n Empty LinkList.....");
			return;
		}
		while(temp!=null){
			System.out.print(temp.data+"  ");
			temp=temp.next;
		}
		System.out.print("-Null");
	System.out.print("\n\n");
	}
	public void reverseLinkedList(){// time 0(n)
		Node Prev=null;
		Node curr=head;
		Node nextEle;
		while(curr!=null){
			nextEle=curr.next;
			curr.next=Prev;
			Prev=curr;
			curr=nextEle;
		}
		head=Prev;
		
	}
	public void deleteNthFromlast(int n){
		int size_of_ll=0;
		Node temp=head;
		while(temp!=null){
			temp=temp.next;
			size_of_ll++;
		}
		if(size_of_ll==n){
			head=head.next;
			return;
		}
		Node prev=head;
		int i=1;
		while(i<size_of_ll-n){
			prev=prev.next;
			i++;
		}
		prev.next=(prev.next).next;
		return;
	}
	public static void main(String args[]){
		reverseLinkL obj1=new reverseLinkL();
		obj1.addAtFirst(12);
		obj1.addAtFirst(11);
		obj1.addAtFirst(10);
		obj1.addAtFirst(9);
		obj1.addAtFirst(8);
		obj1.addAtFirst(7);
		obj1.addAtFirst(6);
		obj1.printLinkedList();
		//obj1.reverseLinkedList();
		//obj1.printLinkedList();
		obj1.deleteNthFromlast(3);
		obj1.printLinkedList();	
		
	}
}
