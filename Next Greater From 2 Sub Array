import java.util.Stack;
class DuplicateParenthesis{
	void printArray(int arr[]){
		for(int i=0;i<arr.length;i++){
			System.out.print(arr[i]+"  ");
		}
		System.out.println("");
	}
	void clearCodetofindMaxArea(int[] num1,int[] num2){
	   	Stack<Integer> s=new Stack<Integer>();
		int[] nxtOfNum2=new int[num2.length];
		//find next greater for num2
		for(int i=num2.length-1;i>=0;i--){
			while(!s.empty()&&num2[s.peek()]<=num2[i]){
				s.pop();
			}
			if(s.empty()){
				nxtOfNum2	[i]=-1;
				//s.push(i);	
			}
			else if(!s.empty()&&num2[s.peek()]>num2[i]){
				nxtOfNum2	[i]=s.peek();
				//s.push(i);
			}
			s.push(i);
	                    }
	                    //find num1 position in  num2/index
	                  //  printArray(nxtOfNum2);
	                    for(int i=0;i<num1.length;i++){
	                    	int k=0;
	                    	while(k<num2.length){
	                    		if(num1[i]==num2[k]){
	                    			num1[i]=k;
	                    			break;
	                    		}
	                    		k++;
	                    	}
	                    }
	                   printArray(num1);		
		printArray(nxtOfNum2);
		for(int i=0;i<num1.length;i++){
			int k=0;
	                    	while(k<nxtOfNum2.length){
	                    		if(num1[i]==k){
	                    			System.out.print(k+"    \n");
	                    			if(nxtOfNum2[k]==-1){
	                    				num1[i]=-1;	

	                    			}
	                    			else{
				 		num1[i]=num2[nxtOfNum2[k]];

	                    			}
	               	 			break;

	                    		}
	                    		k++;
	                    	}
		}
		printArray(num1);				
	}

	int[] clearCode(int[] num1,int[] num2){
	Stack<Integer> s=new Stack<Integer>();
		int[] nxtOfNum2=new int[num2.length];
		//find next greater for num2
		for(int i=num2.length-1;i>=0;i--){
			while(!s.empty()&&num2[s.peek()]<=num2[i]){
				s.pop();
			}
			if(s.empty()){
				nxtOfNum2	[i]=-1;
				//s.push(i);	
			}
			else if(!s.empty()&&num2[s.peek()]>num2[i]){
				nxtOfNum2	[i]=s.peek();
				//s.push(i);
			}
			s.push(i);
	                    }
	                    for(int i=0;i<num1.length;i++){
	                    	int k=0;
	                    	while(k<num2.length){
	                    		if(num1[i]==num2[k]){
	                    			num1[i]=k;
	                    			break;
	                    		}
	                    		k++;
	                    	}
	                    }
		for(int i=0;i<num1.length;i++){
			int k=0;
	                    	while(k<nxtOfNum2.length){
	                    		if(num1[i]==k){
	                    			System.out.print(k+"    \n");
	                    			if(nxtOfNum2[k]==-1){
	                    				num1[i]=-1;	

	                    			}
	                    			else{
				 		num1[i]=num2[nxtOfNum2[k]];

	                    			}
	               	 			break;

	                    		}
	                    		k++;
	                    	}
		}
		return num1;	
	}
	public static void main(String args[]){
		DuplicateParenthesis obj1=new DuplicateParenthesis();
		int arr1[]={2,4};
		int arr2[]={1,2,3,4};//[4,1,2], nums2 = [1,3,4,2]
		obj1.clearCodetofindMaxArea(arr1,arr2);
		//System.out.println("Result-->"+res);
		//2,4], nums2 = [1,2,3,4
	}
}
